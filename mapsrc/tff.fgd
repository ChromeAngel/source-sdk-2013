// Generated by LibModMaker at 23/05/2018 08:03:10
@include "base.fgd"
@BaseClass = tff_team_entity
[
	team_number(choices) : "Team Number"=
	[
		-1 : "Any"
		0 : "Neutral"
		1 : "Spectators"
		2 : "Red"
		3 : "Blue"
	]

	// Inputs
	input SetTeamNumber(integer) : "Specify the team number to change to"
	// Outputs
	output OnTeamSet(integer) : "Fired when my team is set"
	output OnTeamSet(integer) : "Fired when my team is set"
]

@BaseClass base(tff_team_entity, Angles, Targetname) = tff_base_payload_path
[
	model(studio) : "Model" 
	next_path_entity(target_destination) : "Next Path Entity" 
	speed(integer) : "Speed"  : 300
	// Outputs
	output OnPayloadPassed(void) : ""
]

@PointClass base(Targetname) = tff_rules:
"Game Rules and Timer for TFF"
[
	setup_time(integer) : "Setup time (seconds)"  : 0
	timeout(integer) : "Timeout (seconds)"  : 300
	mode(choices) : "Game Mode"=
	[
		1 : "Team Deathmatch"
		2 : "King of the Hill"
		3 : "Control Point"
		4 : "Payload"
		5 : "Old Freebie"
		6 : "Head Hunter"
	]

	// Inputs
	input SetTimeout(integer) : "Sets the round timeout in seconds"
	input AddTime(integer) : "Delays the end of the round"
	input RemoveTime(integer) : "Shortems the round"
	input ForceTimeout(void) : "Timeout right now"
	// Outputs
	output OnSetupEnded(void) : ""
	output OnTimeout(void) : ""
]

@PointClass base(tff_team_entity, Targetname) = tff_team:
"Team configuration, feedback and control"
[
	spawn_entity(target_destination) : "Spawn Entity" 
	spawn_time(integer) : "Spawn Time"  : 5
	role(choices) : "Role" : 1 =
	[
		1 : "Opposing"
		2 : "Attacker"
		3 : "Defender"
	]

	mission(string) : "Mission" 
	mission_entity(target_destination) : "Mission Entity" 
	target_score(integer) : "Target Score"  : 3
	spawnflags(flags) =
	[
		1 : "AllowSoldier" : 1
		2 : "AllowHeavy" : 1
		4 : "AllowDemo" : 1
		8 : "AllowMedic" : 1
		16 : "AllowEngie" : 1
		32 : "AllowPyro" : 1
		64 : "AllowSniper" : 1
		128 : "AllowScout" : 1
		256 : "AllowSpy" : 1
	]

	hologram_model(studio) : "Hologram Model" 
	color(color255) : "Team Color (for effects)"  : "255 0 0"
	// Inputs
	input AddScore(integer) : "Add points"
	input RemoveScore(integer) : "Remove points"
	input ResetScore(void) : "Reset points to zero"
	input Victory(void) : "Awards victory to this team"
]

@PointClass base(Angles, Targetname, BaseTrain, Studiomodel, tff_team_entity) = tff_payload:
"Payload on train"
[
	camera_offset(vector) : "Camera Offset"  : "0 0 128"
	start_sound(sound) : "Start Sound" 
	move_sound(sound) : "Move Sound (looped)" 
	stop_sound(sound) : "Stop Sound" 
	path_start_entity(target_destination) : "Path Start Entity" 
	// Outputs
	output OnFirstMove(void) : "Payload started moving"
	output OnStop(void) : "Payload stopped"
	output OnFullSpeed(void) : "Payload reached full speed"
	output OnCrossedWaypoint(void) : "Playload crossed a waypoint"
	output OnEnteredEnemyBase(void) : "Payload entered the enemy base"
]

@PointClass base(Inputfilter) = tff_pickup:
"pickup a random item"
[
	spawn_rate(integer) : "Spawn Rate (seconds)"  : 30
	spawn_sound(sound) : "Spawn Sound" 
	spawnflags(flags) =
	[
		1 : "AllowAmmo" : 1
		2 : "AllowHealth" : 1
	]

	// Outputs
	output OnSpawnItem(void) : ""
	output OnItemPickup(void) : ""
]

@PointClass base(tff_team_entity, Studiomodel, Targetname) = tff_flag:
"Carryable player item and objective for the Old Freebie mode"
[
	return_time(integer) : "Return Time (seconds)" 
	// Outputs
	output OnPickedUp(void) : ""
	output OnLeftHomeBase(void) : ""
	output OnEnteredEnemyBase(void) : ""
	output OnDropped(void) : ""
	output OnReturned(void) : ""
]

@PointClass base(tff_team_entity, Studiomodel, Targetname, Inputfilter) = tff_flag_point:
"A point to host or score a flag"
[
	radius(integer) : "Capture Radius"  : 512
	flag_entity(target_destination) : "Flag Entity" 
	camera_offset(vector) : "Spectator Camera Offset"  : "0 0 128"
	// Outputs
	output OnFlagTaken(void) : "Fired when Flag was Taken"
	output OnFlagReturned(void) : "Fired when Flag was Returned"
]

@PointClass base(tff_team_entity, Studiomodel, Targetname, Inputfilter) = tff_control_point:
"A platform from which a team can dominate an area"
[
	sequence(integer) : "Sequence" 
	radius(integer) : "Radius (world units)"  : 512
	capture_time(float) : "Capture Time (seconds)"  : 5
	camera_offset(vector) : "Spectator Camera Offset"  : "0 0 128"
	start_capture_sound(sound) : "Start Capture Sound" 
	contested_capture_sound(sound) : "Contested capture sound" 
	loop_capture_sound(sound) : "Looped capture sound" 
	finish_capture_sound(sound) : "Finish capture sound" 
	locked_sound(sound) : "Locked sound" 
	// Outputs
	output OnCaptureStart(void) : "Fires when one team tries to capture this point"
	output OnContested(void) : "Fires when both teams try to capture the point"
	output OnCaptured(void) : "Fires when a team captures this point"
]

@PointClass base(tff_team_entity, Studiomodel, Targetname) = tff_head_museum:
"A structure where heads in jars can be scored"
[
	radius(integer) : "Capture Radius (world units)"  : 512
	capture_sound(sound) : "Capture sound" 
	failed_capture_sound(sound) : "Failed capture sound" 
	// Outputs
	output OnCapture(void) : "Fires when a head is captured here"
	output OnFailedCapture(void) : "Fires when an enemy player tries to capture here"
]

@PointClass base(tff_base_payload_path) = tff_payload_path_straight:
"A straight peice of track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_waypoint:
"A waypoint peice of track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_start:
"A starting track segment"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_ramp_up:
"An upward sloping track"
[
]

@PointClass = tff_payload_path_ramp_down:
"Downward sloping track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_veer_left:
"Left veering track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_veer_right:
"Right veering track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_curve_left:
"Left curiving track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_curve_right:
"Right curiving track"
[
]

@PointClass base(tff_base_payload_path) = tff_payload_path_terminus:
"A terminating track segment"
[
]

@SolidClass base(tff_team_entity, EnableDisable, Angles, Targetname, BaseBrush) = tff_func_spawn:
"Area to spawn team players in"
[
	// Outputs
	output OnPlayerSpawn(void) : ""
	output OnPlayerLeave(void) : ""
	output OnPlayerleave(void) : ""
]

@SolidClass base(tff_team_entity, Targetname, BaseBrush) = tff_team_base:
"A volume that contains one teams base, all entities that spawn inside it are on that team"
[
]

