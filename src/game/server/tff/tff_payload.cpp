// Purpose: Body for tff_payload
// Boilerplate generated by ModMaker on 23/05/2018 07:50:15
/* Payload on train*/

#include "cbase.h"
#include "tff_payload.h"

// memdbgon must be the last include file in a .cpp file!!!
#include "tier0/memdbgon.h"

LINK_ENTITY_TO_CLASS( tff_payload, CTffPayload );

BEGIN_DATADESC( CTffPayload )
    DEFINE_KEYFIELD( m_vecCameraOffset, FIELD_VECTOR, "camera_offset" ),
    DEFINE_KEYFIELD( m_iStartSound, FIELD_SOUNDNAME, "start_sound" ),
    DEFINE_KEYFIELD( m_iMoveSound, FIELD_SOUNDNAME, "move_sound" ),
    DEFINE_KEYFIELD( m_iStopSound, FIELD_SOUNDNAME, "stop_sound" ),
    DEFINE_KEYFIELD( m_iPathStartEntity, FIELD_STRING, "path_start_entity" ),
    DEFINE_OUTPUT( m_OnFirstMove, "OnFirstMove" ),
    DEFINE_OUTPUT( m_OnStop, "OnStop" ),
    DEFINE_OUTPUT( m_OnFullSpeed, "OnFullSpeed" ),
    DEFINE_OUTPUT( m_OnCrossedWaypoint, "OnCrossedWaypoint" ),
    DEFINE_OUTPUT( m_OnEnteredEnemyBase, "OnEnteredEnemyBase" ),
END_DATADESC()

void CTffPayload ::Precache()
{
    PrecacheScriptSound( STRING(m_iStartSound) );
    PrecacheScriptSound( STRING(m_iMoveSound) );
    PrecacheScriptSound( STRING(m_iStopSound) );
}
void CTffPayload ::Spawn()
{
    BaseClass::Spawn();

    Precache();

	if (m_iPathStartEntity == NULL_STRING) return;

	CBaseEntity * pStartEnt = gEntList.FindEntityByName(NULL, m_iPathStartEntity, this);

	if (pStartEnt == NULL)
	{
		Warning("tff_payload %s canoot find it's starting entity %s\n", GetEntityName(), STRING(m_iPathStartEntity));
		return;
	}

	Vector nextPos    = pStartEnt->GetAbsOrigin();
	QAngle nextAngles = pStartEnt->GetAbsAngles();

	Teleport(&nextPos, &nextAngles, NULL);

	m_bHasMoved     = false;
	m_eMoveSpeed    = STOPPED;
	m_fEffectRadius = 512.0f;
	m_fMaxSpeed     = 0.0f; //TODO set this from our path
	// m_vNextPath = ??; //TODO set this from our path

	SetContextThink(&CTffPayload::TrainThink, gpGlobals->curtime + 0.1f, "train");
}

void  CTffPayload::TrainThink()
{
	///TODO check we're in the playing phase, so we're not moving during the setup or intermission

	//Let's see how many allies and enemies are nearby
	TrainCheckPlayers();
	
	if (m_iEnemies > 0)
	{
		if (m_eMoveSpeed > STOPPED)
		{
			TrainStop();
		}
	}
	else 
	{
		if (m_iAllies == 0 && m_eMoveSpeed > STOPPED)
		{
			TrainStop();
		}
		else
		{
			//Max speed out at 3 pushing players
			m_iAllies = min(m_iAllies, 3);
			float fSpeedRatio = (float)m_iAllies / 3.0f;
			float fMaxSpeed = m_fMaxSpeed * fSpeedRatio; //Modifying out maximum speed by the number of players pushing
			Vector vNewSpeed = m_vNextPath.Normalized() * fMaxSpeed; //speed is actually a vector
			SetAbsVelocity(vNewSpeed);

			if (m_eMoveSpeed < RUNNING && m_iAllies == 3)
			{
				m_OnFullSpeed.FireOutput(this, this);
			}

			if (m_iAllies == 1) m_eMoveSpeed = SLOW;
			if (m_iAllies == 2) m_eMoveSpeed = MOVING;
			if (m_iAllies == 3) m_eMoveSpeed = RUNNING;
		}
	}

	//TODO dispense healing and ammo

	//TODO check if we've passed to the next path

	//check again in half a second
	SetContextThink(&CTffPayload::TrainThink, gpGlobals->curtime + 0.5f, "train");
};

//Let's see how many allies and enemies are nearby (split out from think for readability)
void CTffPayload::TrainCheckPlayers()
{
	//reset our counters
	m_iAllies = 0;
	m_iWoundedAllies = 0;
	m_iLowAmmoAllies = 0;
	m_iEnemies = 0;

	//foreach player within our effective radius
	CBaseEntity * pPlayer = gEntList.FindEntityInSphere(NULL, GetAbsOrigin(), m_fEffectRadius);
	while (pPlayer)
	{
		if (!pPlayer->IsPlayer() || !pPlayer->IsAlive())
		{
			pPlayer = gEntList.FindEntityInSphere(pPlayer, GetAbsOrigin(), m_fEffectRadius);
			continue;
		}

		if (IsAlly(pPlayer))
		{
			m_iAllies++;

			//Does he need my help?
			CBasePlayer * pDisPlayer = dynamic_cast<CBasePlayer *>(pPlayer);

			if (pDisPlayer != NULL)
			{
				if (pDisPlayer->GetHealth() < pDisPlayer->GetMaxHealth())
				{
					//He's hurt
					m_woundedAllies[m_iWoundedAllies] = pDisPlayer;
					m_iWoundedAllies++;
				}

				CBaseCombatWeapon * pWeapon = pDisPlayer->GetActiveWeapon();
				if (pWeapon != NULL)
				{
					//He's low on ammo
					if (pWeapon->GetPrimaryAmmoCount() < pWeapon->GetMaxClip1())
					{
						m_lowAmmoAllies[m_iLowAmmoAllies] = pDisPlayer;
						m_iLowAmmoAllies++;
					}
				}
			}
		}
		if (IsEnemy(pPlayer))
		{
			m_iEnemies++;
		}

		pPlayer = gEntList.FindEntityInSphere(pPlayer, GetAbsOrigin(), m_fEffectRadius);
	}
}

void CTffPayload::TrainStop()
{
	m_eMoveSpeed = STOPPED;
	Vector vStopped(0, 0, 0);
	SetAbsVelocity(vStopped);

	m_OnStop.FireOutput(this, this);

	//TODO screeching brakes
};