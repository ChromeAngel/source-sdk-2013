// Purpose: Body for tff_head_museum
// Boilerplate generated by ModMaker on 23/05/2018 07:50:03
/* */

#include "cbase.h"
#include "tff_head_museum.h"
#include "team.h"

// memdbgon must be the last include file in a .cpp file!!!
#include "tier0/memdbgon.h"

LINK_ENTITY_TO_CLASS( tff_head_museum, CTffHeadMuseum );

BEGIN_DATADESC( CTffHeadMuseum )
    DEFINE_KEYFIELD( m_iRadius, FIELD_INTEGER, "radius" ),
    DEFINE_KEYFIELD( m_iCaptureSound, FIELD_SOUNDNAME, "capture_sound" ),
    DEFINE_KEYFIELD( m_iFailedCaptureSound, FIELD_SOUNDNAME, "failed_capture_sound" ),
    DEFINE_OUTPUT( m_OnCapture, "OnCapture" ),
    DEFINE_OUTPUT( m_OnFailedCapture, "OnFailedCapture" ),
END_DATADESC()

void CTffHeadMuseum ::Precache()
{
    PrecacheScriptSound( STRING(m_iCaptureSound) );
    PrecacheScriptSound( STRING(m_iFailedCaptureSound) );
}
void CTffHeadMuseum ::Spawn()
{
    BaseClass::Spawn();

    Precache();

	SetTouch( &CTffHeadMuseum::FlagTouch );
}

capture_reason CTffHeadMuseum::CanCapture(CBaseEntity * pFlag)
{
	if ( pFlag == NULL ) return NULL_ENT;
	if ( pFlag->ClassMatches(MAKE_STRING("tff_flag")) ) return NO_FLAG;
	if ( GetAbsOrigin().DistTo(pFlag->GetAbsOrigin()) > m_iRadius ) return NO_RANGE;
	if (!IsAlly(pFlag)) return NO_TEAM;

	return OK;
};

void CTffHeadMuseum::FlagTouch(CBaseEntity * pOther)
{
	capture_reason reason = CanCapture(pOther);

	//If someone tried to cap at the wrong museum
	if (reason == NO_TEAM)
	{
		m_OnFailedCapture.FireOutput(pOther, this);
		EmitSound(STRING(m_iFailedCaptureSound));

		return;
	}

	//any other failure
	if (reason != OK)
	{
		return;
	}

	pOther->AcceptInput("captured", pOther, this, variant_t(), NULL);
	pOther->Remove();

	GetTeam()->AddScore(1);

	m_OnCapture.FireOutput(pOther, this);
	EmitSound(STRING(m_iCaptureSound));
}