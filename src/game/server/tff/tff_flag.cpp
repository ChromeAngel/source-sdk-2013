// Purpose: Body for tff_flag
// Boilerplate generated by ModMaker on 23/05/2018 07:44:27
/* Carryable player item and objective for the Old Freebie mode*/

#include "cbase.h"
#include "eventqueue.h"
#include "tff_flag.h"

// memdbgon must be the last include file in a .cpp file!!!
#include "tier0/memdbgon.h"

extern CEventQueue g_EventQueue;

#define TFF_FLAG_POINT_RADIUS 256.0f

BEGIN_DATADESC( CTffFlag )
    DEFINE_KEYFIELD( m_iReturnTime, FIELD_INTEGER, "return_time" ),
	DEFINE_KEYFIELD( m_iFlagPointEntity, FIELD_STRING, "flag_point_entity"),
    DEFINE_OUTPUT( m_OnPickedUp, "OnPickedUp" ),
    DEFINE_OUTPUT( m_OnLeftHomeBase, "OnLeftHomeBase" ),
    DEFINE_OUTPUT( m_OnEnteredEnemyBase, "OnEnteredEnemyBase" ),
    DEFINE_OUTPUT( m_OnDropped, "OnDropped" ),
    DEFINE_OUTPUT( m_OnReturned, "OnReturned" ),
END_DATADESC()

LINK_ENTITY_TO_CLASS(tff_flag, CTffFlag);

void CTffFlag::Precache()
{
	BaseClass::Precache();

	UTIL_PrecacheOther("tff_flag_point");
};

void CTffFlag::Spawn()
{
	BaseClass::Spawn();

	Precache();

	CBaseEntity * pPoint = NULL;

	if (m_iFlagPointEntity == NULL_STRING)
	{
		pPoint = gEntList.FindEntityByClassnameNearest("tff_flag_point", GetAbsOrigin(), TFF_FLAG_POINT_RADIUS);
	}
	else {
		pPoint = gEntList.FindEntityByName(NULL, m_iFlagPointEntity, this);

		if (pPoint->ClassMatches(MAKE_STRING("tff_flag_point")))
		{
			pPoint = NULL;
		}
	}

	if (pPoint == NULL)
	{
		pPoint = CreateEntityByName("tff_flag_point");
		pPoint->KeyValue("radius", TFF_FLAG_POINT_RADIUS);

		//Move the point to our location
		Vector origin = GetAbsOrigin();
		pPoint->SetAbsOrigin(origin);
		pPoint->Spawn();

		//Bump us up above our point
		Vector pointMax = pPoint->GetCollideable()->OBBMaxs();
		origin.z = origin.z + pointMax.z + 1.0f;
		SetAbsOrigin(origin);
	}

	pPoint->ChangeTeam(GetTeamNumber());
	SetOriginalSpawnOrigin(GetAbsOrigin());
	SetOriginalSpawnAngles(GetAbsAngles());
	m_iFlagPointEntity = pPoint->GetEntityName();
	m_eFlagPoint       = pPoint->GetRefEHandle();
	m_eState           = ON_POINT;

	g_EventQueue.AddEvent(pPoint, "ReturnFlag", 0.01f , this, this);
};

void CTffFlag::ItemTouch(CBaseEntity *pOther)
{
	if (pOther == NULL) return;
	if (pOther->ClassMatches("tff_team_base"))
	{
		if (IsEnemy(pOther))
		{
			m_OnEnteredEnemyBase.FireOutput(pOther, this);
		}
	}

	if (pOther->IsPlayer())
	{
		if (IsEnemy(pOther))
		{
			m_eCarrier = pOther->GetRefEHandle();
			SetParent(pOther);
			SetState(CARRIED, pOther);
			
		}

		if (m_eFlagPoint.IsValid())
		{
			if (IsAlly(pOther))
			{
				CBaseEntity * pPoint = m_eFlagPoint.Get();

				if (GetAbsOrigin().DistTo(pPoint->GetAbsOrigin()) > TFF_FLAG_POINT_RADIUS)
				{
					Respawn();
					SetState(ON_POINT, pOther);
				}
			}

		}

	}

	BaseClass::ItemTouch(pOther);
};

void CTffFlag::SetState(TFF_Flag_State state, CBaseEntity * Setter)
{
	if (state == m_eState) return;

	//picked up by an enemy
	if (m_eState == ON_POINT && state == CARRIED)
	{
		m_OnPickedUp.FireOutput(Setter, this);
	}

	//Retuend by an ally
	if (m_eState == DROPPED && state == ON_POINT)
	{
		g_EventQueue.AddEvent(m_eFlagPoint.Get(), "ReturnFlag", 0.01f, Setter, this);
		m_OnReturned.FireOutput(Setter, this);
	}

	//enemy carrier died
	if (m_eState == CARRIED && state == DROPPED)
	{
		m_OnDropped.FireOutput(Setter, this);
	}

	m_eState = state;
};